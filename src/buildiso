#!/bin/bash

# switch to basic language
export LANG=C
export LC_MESSAGES=C

if [ ! -e options.conf ] ; then
    echo " "
    echo "the config file options.conf is missing, exiting..."
    echo " "
    exit
else
    . options.conf
fi

if [ ! -e /usr/share/${manjaroiso}/functions/messages ] ; then
    echo " "
    echo "missing ${manjaroiso} functions file, please run «sudo make install» inside ${manjaroiso}/"
    echo " "
    exit
fi

.  /usr/share/${manjaroiso}/functions/messages
get_colors

if [ -e Packages-Xfce ] ; then
    de="-xfce"
    desktop="xfce"
    pkgsfile="Packages-Xfce"
fi
if [ -e Packages-Kde ] ; then
    de="-kde"
    desktop="kde"
    pkgsfile="Packages-Kde"
fi
if [ -e Packages-Gnome ] ; then
    de="-gnome"
    desktop="gnome"
    pkgsfile="Packages-Gnome"
fi
if [ -e Packages-Cinnamon ] ; then
    de="-cinnamon"
    desktop="cinnamon"
    pkgsfile="Packages-Cinnamon"
fi
if [ -e Packages-Openbox ] ; then
    de="-openbox"
    desktop="openbox"
    pkgsfile="Packages-Openbox"
fi
if [ -e Packages-Lxde ] ; then
    de="-lxde"
    desktop="lxde"
    pkgsfile="Packages-Lxde"
fi
if [ -e Packages-Mate ] ; then
    de="-mate"
    desktop="mate"
    pkgsfile="Packages-Mate"
fi
if [ -e Packages-E17 ] ; then
    de="-e17"
    desktop="e17"
    pkgsfile="Packages-E17"
fi
if [ -e Packages-Net ] ; then
    de="-net"
    desktop="net"
    pkgsfile="Packages-Net"
fi
if [ -e Packages-Custom ] ; then
    de="-custom"
    desktop="custom"
    pkgsfile="Packages-Custom"
fi

# do UID checking here so someone can at least get usage instructions
if [ "$EUID" != "0" ]; then
    echo "error: This script must be run as root."
    exit 1
fi

banner

if [ -z "${arch}" ] ; then
    arch=$(pacman -Qi bash | grep "Architecture" | cut -d " " -f 5)
    echo " "
    msg  "architecture not supplied, defaulting to host's architecture: ${arch}"
fi


if [ ! -e Packages ] ; then
    echo " "
    error "the config file Packages is missing, exiting..."
    echo " "
    exit
fi

if [ ! -e "pacman-${arch}.conf" ] ; then
    echo " "
    error "the config file pacman-${arch}.conf is missing, exiting..."
    echo " "
    exit
fi

set -e -u

pwd=`pwd`

if [ "${arch}" == "i686" ]; then
	packages=$(sed "s|#.*||g" Packages | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
elif [ "${arch}" == "x86_64" ]; then
	packages=$(sed "s|#.*||g" Packages | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
fi

if [ -e Packages-Xorg ] ; then
     if [ "${arch}" == "i686" ]; then
     	xorg_packages=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_free_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni.*||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_nonfree_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni.*||g" | sed "s|>nonfree_x64.*||g" | sed "s|>nonfree_uni||g" | sed "s|^.*catalyst-legacy.*||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	xorg_packages=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64||g" | sed "s|>free_uni||g" | sed "s|>nonfree_uni||g" | sed "s|>nonfree_x64||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_free_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64||g" | sed "s|>free_uni||g" | sed "s|>nonfree_uni.*||g" | sed "s|>nonfree_x64.*||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     	xorg_nonfree_overlay=$(sed "s|#.*||g" Packages-Xorg | sed "s| ||g" | sed "s|>dvd.*||g" | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>free_x64.*||g" | sed "s|>free_uni.*||g" | sed "s|>nonfree_uni||g" | sed "s|>nonfree_x64||g" | sed "s|^.*catalyst-legacy.*||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
     xorg_packages_cleanup=$(sed "s|#.*||g" Packages-Xorg | grep cleanup | sed "s|>cleanup||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
fi

if [ -e Packages-Lng ] ; then
     if [ "${arch}" == "i686" ]; then
     	lng_packages=$(sed "s|#.*||g" Packages-Lng | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|>kde.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	lng_packages=$(sed "s|#.*||g" Packages-Lng | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>cleanup.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|>kde.*||g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
     lng_packages_cleanup=$(sed "s|#.*||g" Packages-Lng | grep cleanup | sed "s|>cleanup||g")
     lng_packages_kde=$(sed "s|#.*||g" Packages-Lng | grep kde | sed "s|>kde||g" | sed ':a;N;$!ba;s/\n/ /g')
fi

if [ -e "${pkgsfile}" ] ; then
     if [ "${arch}" == "i686" ]; then
     	de_packages=$(sed "s|#.*||g" "${pkgsfile}" | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>x86_64.*||g" | sed "s|>i686||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     elif [ "${arch}" == "x86_64" ]; then
     	de_packages=$(sed "s|#.*||g" "${pkgsfile}" | sed "s| ||g" | sed "s|>dvd.*||g"  | sed "s|>blacklist.*||g" | sed "s|>i686.*||g" | sed "s|>x86_64||g" | sed "s|KERNEL|$manjaro_kernel|g" | sed ':a;N;$!ba;s/\n/ /g')
     fi
fi

# Base installation (root-image)
make_root_image() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
         echo -e -n "$_r >$_W Base installation (root-image) \n $_n"
         mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "root-image" -p "${packages}" create "${work_dir}"
         pacman -Qr "${work_dir}/root-image" > "${work_dir}/root-image/root-image-pkgs.txt"
         cp ${work_dir}/root-image/etc/locale.gen.bak ${work_dir}/root-image/etc/locale.gen
         if [ -e ${work_dir}/root-image/boot/grub/grub.cfg ] ; then
            rm ${work_dir}/root-image/boot/grub/grub.cfg
         fi
         if [ -e ${work_dir}/root-image/etc/plymouth/plymouthd.conf ] ; then
            sed -i -e "s/^.*Theme=.*/Theme=$plymouth_theme/" ${work_dir}/root-image/etc/plymouth/plymouthd.conf
         fi
         if [ -e ${work_dir}/root-image/usr/sbin/cupsd ] ; then
            mkdir -p "${work_dir}/root-image/etc/systemd/system/multi-user.target.wants"
            ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/root-image/etc/systemd/system/multi-user.target.wants/cups.service"
         fi
         if [ -e ${work_dir}/root-image/usr/bin/keyboardctl ] ; then
            mkdir -p "${work_dir}/root-image/etc/systemd/system/sysinit.target.wants"
            ln -sf '/usr/lib/systemd/system/keyboardctl.service' "${work_dir}/root-image/etc/systemd/system/sysinit.target.wants/keyboardctl.service"
         fi
         cp -LPr overlay/* ${work_dir}/root-image

         # Clean up GnuPG keys
         rm -rf "${work_dir}/root-image/etc/pacman.d/gnupg"

         # Enable followed line if you want to use the pacman.conf used to build this image
         #cp pacman-${arch}.conf ${work_dir}/root-image/etc/pacman.conf
         : > ${work_dir}/build.${FUNCNAME}
         echo -e "$_g >$_W done $_n"
    fi
}

# Desktop installation (de-image)
if [ -e "${pkgsfile}" ] ; then
     make_de_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              echo -e -n "$_r >$_W ${desktop} installation (${desktop}-image) \n $_n"
              mkdir -p ${work_dir}/${desktop}-image
              if [ ! -z "`mount -l | grep ${desktop}-image`" ]; then
                 umount -l ${work_dir}/${desktop}-image
              fi
              mount -t aufs -o br=${work_dir}/${desktop}-image:${work_dir}/root-image=ro none ${work_dir}/${desktop}-image

              mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "${desktop}-image" -p "${de_packages}" create "${work_dir}"

              pacman -Qr "${work_dir}/${desktop}-image" > "${work_dir}/${desktop}-image/${desktop}-image-pkgs.txt"
              cp "${work_dir}/${desktop}-image/${desktop}-image-pkgs.txt" ${name}${de}-${version}-${arch}-pkgs.txt
              if [ -e ${desktop}-overlay ] ; then
                 cp -LPr ${desktop}-overlay/* ${work_dir}/${desktop}-image
              fi
              if [ -e ${work_dir}/${desktop}-image/usr/sbin/cupsd ] ; then
                 mkdir -p "${work_dir}/${desktop}-image/etc/systemd/system/multi-user.target.wants"
                 ln -sf '/usr/lib/systemd/system/cups.service' "${work_dir}/${desktop}-image/etc/systemd/system/multi-user.target.wants/cups.service"
              fi
              # Copy pacman.conf from profile if it is mate
              if [ "${desktop}" == "mate" ] ; then
                 mkdir -p ${work_dir}/${desktop}-image/etc
                 cp pacman-${arch}.conf ${work_dir}/${desktop}-image/etc/pacman.conf
              fi
              umount -l ${work_dir}/${desktop}-image
              rm -R ${work_dir}/${desktop}-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Xorg ] ; then
     # Prepare pkgs-image
     make_pkgs_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              echo -e -n "$_r >$_W Prepare pkgs-image \n $_n"
              mkdir -p ${work_dir}/pkgs-image/opt/livecd/pkgs
              if [ ! -z "`mount -l | grep pkgs-image`" ]; then
                 umount -l ${work_dir}/pkgs-image
              fi
              echo -e -n "$_r >$_W mount root-image \n $_n"
              mount -t aufs -o br=${work_dir}/pkgs-image:${work_dir}/root-image=ro none ${work_dir}/pkgs-image
              if [ ! -z "${de}" ] ; then
                 echo -e -n "$_r >$_W mount ${desktop}-image \n $_n"
                 mount -t aufs -o remount,append:${work_dir}/${desktop}-image=ro none ${work_dir}/pkgs-image
              fi
              pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/pkgs-image" --cache ${work_dir}/pkgs-image/opt/livecd/pkgs -Syw ${xorg_packages} --noconfirm
              if [ ! -z "${xorg_packages_cleanup}" ]; then
                 for xorg_clean in ${xorg_packages_cleanup};
                    do  rm ${work_dir}/pkgs-image/opt/livecd/pkgs/${xorg_clean}
                    done
              fi
              cp pacman-gfx.conf ${work_dir}/pkgs-image/opt/livecd
              rm -r ${work_dir}/pkgs-image/var
              repo-add ${work_dir}/pkgs-image/opt/livecd/pkgs/gfx-pkgs.db.tar.gz ${work_dir}/pkgs-image/opt/livecd/pkgs/*pkg*z
              # Disable Catalyst if not present
              if  [ -z "`ls ${work_dir}/pkgs-image/opt/livecd/pkgs/ | grep catalyst-utils 2> /dev/null`" ]; then
                 echo -e -n "$_r >$_W Disabling Catalyst driver \n $_n"
                 mkdir -p ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/catalyst/
                 touch ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/catalyst/MHWDCONFIG
                 echo -e "$_g >$_W done $_n"
              fi
              if  [ -z "`ls ${work_dir}/pkgs-image/opt/livecd/pkgs/ | grep catalyst-legacy-utils 2> /dev/null`" ]; then
                 echo -e -n "$_r >$_W Disabling Catalyst-Legacy driver \n $_n"
                 mkdir -p ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/catalyst-legacy/
                 touch ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/catalyst-legacy/MHWDCONFIG
                 echo -e "$_g >$_W done $_n"
              fi
              # Disable Nvidia if not present
              if  [ -z "`ls ${work_dir}/pkgs-image/opt/livecd/pkgs/ | grep nvidia-utils 2> /dev/null`" ]; then
                 echo -e -n "$_r >$_W Disabling Nvidia driver \n $_n"
                 mkdir -p ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/nvidia/
                 touch ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/nvidia/MHWDCONFIG
                 echo -e "$_g >$_W done $_n"
              fi
              if  [ -z "`ls ${work_dir}/pkgs-image/opt/livecd/pkgs/ | grep nvidia-utils 2> /dev/null`" ]; then
                 echo -e -n "$_r >$_W Disabling Nvidia Bumblebee driver \n $_n"
                 mkdir -p ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/hybrid-intel-nvidia-bumblebee/
                 touch ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/hybrid-intel-nvidia-bumblebee/MHWDCONFIG
                 echo -e "$_g >$_W done $_n"
              fi
              if  [ -z "`ls ${work_dir}/pkgs-image/opt/livecd/pkgs/ | grep nvidia-304xx-utils 2> /dev/null`" ]; then
                 echo -e -n "$_r >$_W Disabling Nvidia-Legacy driver \n $_n"
                 mkdir -p ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/nvidia-legacy/
                 touch ${work_dir}/pkgs-image/var/lib/mhwd/db/pci/graphic_drivers/nvidia-legacy/MHWDCONFIG
                 echo -e "$_g >$_W done $_n"
              fi
              umount -l ${work_dir}/pkgs-image
              rm -R ${work_dir}/pkgs-image/.wh*
              if [ "${xorg_overlays}" = "yes" ] ; then
                 echo -e -n "$_r >$_W Prepare pkgs-free-overlay \n $_n"
                 mkdir -p ${work_dir}/pkgs-free-overlay
                 if [ ! -z "`mount -l | grep pkgs-free-overlay`" ]; then
                    umount -l ${work_dir}/pkgs-free-overlay
                 fi
                 echo -e -n "$_r >$_W mount root-image \n $_n"
                 mount -t aufs -o br=${work_dir}/pkgs-free-overlay:${work_dir}/root-image=ro none ${work_dir}/pkgs-free-overlay
                 if [ ! -z "${de}" ] ; then
                    echo -e -n "$_r >$_W mount ${desktop}-image \n $_n"
                    mount -t aufs -o remount,append:${work_dir}/${desktop}-image=ro none ${work_dir}/pkgs-free-overlay
                 fi
                 mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "pkgs-free-overlay" -p "${xorg_free_overlay}" create "${work_dir}"
                 umount -l ${work_dir}/pkgs-free-overlay
                 if [ -e ${work_dir}/pkgs-free-overlay/etc/modules-load.d/*virtualbox*conf ] ; then
                    rm ${work_dir}/pkgs-free-overlay/etc/modules-load.d/*virtualbox*conf
                 fi
                 rm -R ${work_dir}/pkgs-free-overlay/.wh*
                 echo -e -n "$_r >$_W Prepare pkgs-nonfree-overlay \n $_n"
                 mkdir -p ${work_dir}/pkgs-nonfree-overlay
                 if [ ! -z "`mount -l | grep pkgs-nonfree-overlay`" ]; then
                    umount -l ${work_dir}/pkgs-nonfree-overlay
                 fi
                 echo -e -n "$_r >$_W mount root-image \n $_n"
                 mount -t aufs -o br=${work_dir}/pkgs-nonfree-overlay:${work_dir}/root-image=ro none ${work_dir}/pkgs-nonfree-overlay
                 if [ ! -z "${de}" ] ; then
                    echo -e -n "$_r >$_W mount ${desktop}-image \n $_n"
                    mount -t aufs -o remount,append:${work_dir}/${desktop}-image=ro none ${work_dir}/pkgs-nonfree-overlay
                 fi
                 mkiso -v -C "pacman-${arch}.conf" -a "${arch}" -D "${install_dir}" -i "pkgs-nonfree-overlay" -p "${xorg_nonfree_overlay}" create "${work_dir}"
                 umount -l ${work_dir}/pkgs-nonfree-overlay
                 if [ -e ${work_dir}/pkgs-nonfree-overlay/etc/modules-load.d/*virtualbox*conf ] ; then
                    rm ${work_dir}/pkgs-nonfree-overlay/etc/modules-load.d/*virtualbox*conf
                 fi
                 rm -R ${work_dir}/pkgs-nonfree-overlay/.wh*
              fi
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

if [ -e Packages-Lng ] ; then
     # Prepare lng-image
     make_lng_image() {
         if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
              echo -e -n "$_r >$_W Prepare lng-image \n $_n"
              mkdir -p ${work_dir}/lng-image/opt/livecd/lng
              if [ ! -z "`mount -l | grep lng-image`" ]; then
                 umount -l ${work_dir}/lng-image
              fi
              echo -e -n "$_r >$_W mount root-image \n $_n"
              mount -t aufs -o br=${work_dir}/lng-image:${work_dir}/root-image=ro none ${work_dir}/lng-image
              if [ ! -z "${de}" ] ; then
                 echo -e -n "$_r >$_W mount ${desktop}-image \n $_n"
                 mount -t aufs -o remount,append:${work_dir}/${desktop}-image=ro none ${work_dir}/lng-image
              fi
              if [ "${kde_lng_packages}" = "yes" ] ; then
                 pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/lng-image" --cache ${work_dir}/lng-image/opt/livecd/lng -Syw ${lng_packages} ${lng_packages_kde} --noconfirm
              else
                 pacman -v --config "pacman-${arch}.conf" --arch "${arch}" --root "${work_dir}/lng-image" --cache ${work_dir}/lng-image/opt/livecd/lng -Syw ${lng_packages} --noconfirm
              fi
              if [ ! -z "${lng_packages_cleanup}" ]; then
                 for lng_clean in ${lng_packages_cleanup};
                    do  rm ${work_dir}/lng-image/opt/livecd/lng/${lng_clean}
                    done
              fi
              cp pacman-lng.conf ${work_dir}/lng-image/opt/livecd
              rm -r ${work_dir}/lng-image/var
              repo-add ${work_dir}/lng-image/opt/livecd/lng/lng-pkgs.db.tar.gz ${work_dir}/lng-image/opt/livecd/lng/*pkg*z
              umount -l ${work_dir}/lng-image
              rm -R ${work_dir}/lng-image/.wh*
              : > ${work_dir}/build.${FUNCNAME}
              echo -e "$_g >$_W done $_n"
         fi
     }
fi

# Prepare ${install_dir}/boot/
make_boot() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
	echo -e -n "$_r >$_W Prepare ${install_dir}/boot/ \n $_n"
	mkdir -p ${work_dir}/iso/${install_dir}/boot/${arch}
        cp ${work_dir}/root-image/boot/memtest86+/memtest.bin ${work_dir}/iso/${install_dir}/boot/${arch}/memtest
	cp ${work_dir}/root-image/boot/vmlinuz* ${work_dir}/iso/${install_dir}/boot/${arch}/${manjaroiso}
        mkdir -p ${work_dir}/boot-image
        if [ ! -z "`mount -l | grep boot-image`" ]; then
           umount -l ${work_dir}/boot-image/proc ${work_dir}/boot-image/sys ${work_dir}/boot-image/dev ${work_dir}/boot-image
        fi
        mount -t aufs -o br=${work_dir}/boot-image:${work_dir}/root-image=ro none ${work_dir}/boot-image
        mount -t proc none ${work_dir}/boot-image/proc
        mount -t sysfs none ${work_dir}/boot-image/sys
        mount -o bind /dev ${work_dir}/boot-image/dev
        cp /usr/lib/initcpio/hooks/miso* ${work_dir}/boot-image/usr/lib/initcpio/hooks
        cp /usr/lib/initcpio/install/miso* ${work_dir}/boot-image/usr/lib/initcpio/install
        cp mkinitcpio.conf ${work_dir}/boot-image/etc/mkinitcpio-${manjaroiso}.conf
        _kernver=`cat ${work_dir}/boot-image/usr/lib/modules/*-MANJARO/version`
        chroot ${work_dir}/boot-image /usr/bin/mkinitcpio -k ${_kernver} -c /etc/mkinitcpio-${manjaroiso}.conf -g /boot/${name}.img
        mv ${work_dir}/boot-image/boot/${name}.img ${work_dir}/iso/${install_dir}/boot/${arch}/${name}.img
        umount -l ${work_dir}/boot-image/proc ${work_dir}/boot-image/sys ${work_dir}/boot-image/dev ${work_dir}/boot-image
        rm -R ${work_dir}/boot-image
	: > ${work_dir}/build.${FUNCNAME}
	echo -e "$_g >$_W done $_n"
    fi
}

# Prepare /EFI
make_efi() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare ${install_dir}/boot/EFI \n $_n"
        mkdir -p ${work_dir}/iso/EFI/boot
        cp ${work_dir}/root-image/usr/lib/prebootloader/PreLoader.efi ${work_dir}/iso/EFI/boot/bootx64.efi
        cp ${work_dir}/root-image/usr/lib/prebootloader/HashTool.efi ${work_dir}/iso/EFI/boot/

        cp ${work_dir}/root-image/usr/lib/gummiboot/gummibootx64.efi ${work_dir}/iso/EFI/boot/loader.efi

        mkdir -p ${work_dir}/iso/loader/entries
        cp efiboot/loader/loader.conf ${work_dir}/iso/loader/
        cp efiboot/loader/entries/uefi-shell-v2-x86_64.conf ${work_dir}/iso/loader/entries/
        cp efiboot/loader/entries/uefi-shell-v1-x86_64.conf ${work_dir}/iso/loader/entries/

        sed "s|%MISO_LABEL%|${iso_label}|g;
             s|%INSTALL_DIR%|${install_dir}|g" \
            efiboot/loader/entries/${manjaroiso}-x86_64-usb.conf > ${work_dir}/iso/loader/entries/${manjaroiso}-x86_64.conf

        sed "s|%MISO_LABEL%|${iso_label}|g;
             s|%INSTALL_DIR%|${install_dir}|g" \
            efiboot/loader/entries/${manjaroiso}-x86_64-nonfree-usb.conf > ${work_dir}/iso/loader/entries/${manjaroiso}-x86_64-nonfree.conf

        # EFI Shell 2.0 for UEFI 2.3+ ( http://sourceforge.net/apps/mediawiki/tianocore/index.php?title=UEFI_Shell )
        curl -o ${work_dir}/iso/EFI/shellx64_v2.efi https://svn.code.sf.net/p/edk2/code/trunk/edk2/ShellBinPkg/UefiShell/X64/Shell.efi
        # EFI Shell 1.0 for non UEFI 2.3+ ( http://sourceforge.net/apps/mediawiki/tianocore/index.php?title=Efi-shell )
        curl -o ${work_dir}/iso/EFI/shellx64_v1.efi https://svn.code.sf.net/p/edk2/code/trunk/edk2/EdkShellBinPkg/FullShell/X64/Shell_Full.efi
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Prepare kernel.img::/EFI for "El Torito" EFI boot mode
make_efiboot() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare ${install_dir}/iso/EFI \n $_n"
        mkdir -p ${work_dir}/iso/EFI/miso
        truncate -s 31M ${work_dir}/iso/EFI/miso/${name}.img
        mkfs.vfat -n MISO_EFI ${work_dir}/iso/EFI/miso/${name}.img

        mkdir -p ${work_dir}/efiboot
        mount ${work_dir}/iso/EFI/miso/${name}.img ${work_dir}/efiboot

        mkdir -p ${work_dir}/efiboot/EFI/miso
        cp ${work_dir}/iso/${install_dir}/boot/x86_64/${manjaroiso} ${work_dir}/efiboot/EFI/miso/${manjaroiso}.efi
        cp ${work_dir}/iso/${install_dir}/boot/x86_64/${name}.img ${work_dir}/efiboot/EFI/miso/${name}.img

        mkdir -p ${work_dir}/efiboot/EFI/boot
        cp ${work_dir}/root-image/usr/lib/prebootloader/PreLoader.efi ${work_dir}/efiboot/EFI/boot/bootx64.efi
        cp ${work_dir}/root-image/usr/lib/prebootloader/HashTool.efi ${work_dir}/efiboot/EFI/boot/

        cp ${work_dir}/root-image/usr/lib/gummiboot/gummibootx64.efi ${work_dir}/efiboot/EFI/boot/loader.efi

        mkdir -p ${work_dir}/efiboot/loader/entries
        cp efiboot/loader/loader.conf ${work_dir}/efiboot/loader/
        cp efiboot/loader/entries/uefi-shell-v2-x86_64.conf ${work_dir}/efiboot/loader/entries/
        cp efiboot/loader/entries/uefi-shell-v1-x86_64.conf ${work_dir}/efiboot/loader/entries/

        sed "s|%MISO_LABEL%|${iso_label}|g;
             s|%INSTALL_DIR%|${install_dir}|g" \
            efiboot/loader/entries/${manjaroiso}-x86_64-dvd.conf > ${work_dir}/efiboot/loader/entries/${manjaroiso}-x86_64.conf

        sed "s|%MISO_LABEL%|${iso_label}|g;
             s|%INSTALL_DIR%|${install_dir}|g" \
            efiboot/loader/entries/${manjaroiso}-x86_64-nonfree-dvd.conf > ${work_dir}/efiboot/loader/entries/${manjaroiso}-x86_64-nonfree.conf

        cp ${work_dir}/iso/EFI/shellx64_v2.efi ${work_dir}/efiboot/EFI/
        cp ${work_dir}/iso/EFI/shellx64_v1.efi ${work_dir}/efiboot/EFI/

        umount ${work_dir}/efiboot
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Prepare /isolinux
make_isolinux() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare ${install_dir}/iso/isolinux \n $_n"
        cp -Lr isolinux ${work_dir}/iso
        if [[ -e ${work_dir}/root-image/usr/lib/syslinux/bios/ ]]; then
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/isolinux.bin ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/isohdpfx.bin ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/ldlinux.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/gfxboot.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/whichsys.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/mboot.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/hdt.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/chain.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/libcom32.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/libmenu.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/libutil.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/bios/libgpl.c32 ${work_dir}/iso/isolinux/
        else
            cp ${work_dir}/root-image/usr/lib/syslinux/isolinux.bin ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/isohdpfx.bin ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/gfxboot.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/whichsys.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/mboot.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/hdt.c32 ${work_dir}/iso/isolinux/
            cp ${work_dir}/root-image/usr/lib/syslinux/chain.c32 ${work_dir}/iso/isolinux/
        fi
        sed "s|%MISO_LABEL%|${iso_label}|g;
                s|%INSTALL_DIR%|${install_dir}|g;
                s|%ARCH%|${arch}|g" isolinux/isolinux.cfg > ${work_dir}/iso/isolinux/isolinux.cfg
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Prepare overlay-image
make_overlay() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Prepare overlay-image \n $_n"
        mkdir -p ${work_dir}/overlay/etc/pacman.d
        cp -LPrd overlay-livecd/* ${work_dir}/overlay
        cp options.conf ${work_dir}/overlay/opt/livecd/options.conf
        #wget -O ${work_dir}/overlay/etc/pacman.d/mirrorlist http://git.manjaro.org/packages-sources/basis/blobs/raw/master/pacman-mirrorlist/mirrorlist
        cp ${work_dir}/root-image/etc/pacman.d/mirrorlist ${work_dir}/overlay/etc/pacman.d/mirrorlist
        sed -i "s/#Server/Server/g" ${work_dir}/overlay/etc/pacman.d/mirrorlist
        sed -i "s/^.*TITLE=.*/  TITLE=\"Manjaro Linux Installation Framework (v${version})\"/g" ${work_dir}/overlay/opt/livecd/setup
        #chmod -R 755 ${work_dir}/overlay/home
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Process isomounts
make_isomounts() {
    if [[ ! -e ${work_dir}/build.${FUNCNAME} ]]; then
        echo -e -n "$_r >$_W Process isomounts \n $_n"
        sed "s|@ARCH@|${arch}|g" isomounts > ${work_dir}/iso/${install_dir}/isomounts
        : > ${work_dir}/build.${FUNCNAME}
        echo -e "$_g >$_W done $_n"
    fi
}

# Build ISO
make_iso() {
        echo -e -n "$_r >$_W Build ISO \n $_n"
        touch "${work_dir}/iso/.miso"
        mkiso "${verbose}" "${overwrite}" -D "${install_dir}" -L "${iso_label}" -a "${arch}" -c "${compression}" "${high_compression}" iso "${work_dir}" "${name}${de}-${version}-${arch}.iso"
        echo -e "$_g >$_W done $_n"
}

if [[ $verbose == "y" ]]; then
    verbose="-v"
else
    verbose=""
fi

if [[ $overwrite == "y" ]]; then
    overwrite="-f"
else
    overwrite=""
fi

if [[ $high_compression == "y" ]]; then
    high_compression="-x"
else
    high_compression=""
fi

# install basic
make_root_image
# install DE(s)
make_de_image
# install xorg-drivers
if [ -e Packages-Xorg ] ; then
    make_pkgs_image
fi
# install translations
if [ -e Packages-Lng ] ; then
    make_lng_image
fi
# install common
make_boot
if [ "${arch}" == "x86_64" ]; then
    make_efi
    make_efiboot
fi
make_isolinux
make_overlay
make_isomounts
make_iso
